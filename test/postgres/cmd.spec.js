const { expect } = require('chai');
const Parser = require('../../src/parser').default

describe('Postgres Customize', () => {
  const parser = new Parser();
  const opt = {
    database: 'postgresql'
  }

  function getParsedSql(sql, opt) {
    const ast = parser.astify(sql, opt);
    return parser.sqlify(ast, opt);
  }

  const SQL_LIST = [
    {
      title: 'column generated by always',
      sql: [
        'CREATE TABLE address (id bigint generated always AS IDENTITY primary key)',
        'CREATE TABLE "address" (id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY)'
      ]
    },
    {
      title: 'column generated by default',
      sql: [
        'CREATE TABLE address (id bigint generated by default AS IDENTITY primary key)',
        'CREATE TABLE "address" (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY)'
      ]
    },
    {
      title: 'alter table alter column set data type',
      sql: [
        'ALTER TABLE address ALTER COLUMN name TYPE VARCHAR(10), ALTER COLUMN age TYPE BOOLEAN;',
        'ALTER TABLE "address" ALTER COLUMN name TYPE VARCHAR(10), ALTER COLUMN age TYPE BOOLEAN'
      ]
    },
    {
      title: 'alter table alter column set default',
      sql: [
        'ALTER TABLE address ALTER COLUMN name SET DEFAULT `name`;',
        'ALTER TABLE "address" ALTER COLUMN name SET DEFAULT `name`'
      ]
    },
    {
      title: 'alter table alter column set null',
      sql: [
        'ALTER TABLE address ALTER COLUMN name SET DEFAULT NULL;',
        'ALTER TABLE "address" ALTER COLUMN name SET DEFAULT NULL'
      ]
    },
    {
      title: 'alter table rename column',
      sql: [
        'ALTER TABLE address RENAME COLUMN name TO new_name;',
        'ALTER TABLE "address" RENAME COLUMN name TO new_name'
      ]
    },
    {
      title: 'Insert DEFAULT value',
      sql: [
        'INSERT INTO table_name (col1, col2, col3) VALUES (NOW(), NULL, DEFAULT)',
        'INSERT INTO "table_name" (col1, col2, col3) VALUES (NOW(),NULL,DEFAULT)',
      ],
    },
    {
      title: 'timestamptz',
      sql: [
        'CREATE TABLE table_name (created_at timestamptz NOT NULL, updated_at timestamp NOT NULL)',
        'CREATE TABLE "table_name" (created_at TIMESTAMPTZ NOT NULL, updated_at TIMESTAMP NOT NULL)',
      ],
    },
  ]

  function neatlyNestTestedSQL(sqlList) {
    sqlList.forEach(sqlInfo => {
      const {title, sql} = sqlInfo
      it(`should support ${title}`, () => {
        expect(getParsedSql(sql[0], opt)).to.equal(sql[1])
      })
    })
  }

  neatlyNestTestedSQL(SQL_LIST)
})
